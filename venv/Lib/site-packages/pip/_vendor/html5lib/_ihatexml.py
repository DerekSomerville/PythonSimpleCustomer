from __future__ import absolute_import, division, unicode_literals

import re
import warnings

from .constants import DataLossWarning

base_char = """
[#x0041-#x005_a] | [#x0061-#x007_a] | [#x00_c0-#x00_d6] | [#x00_d8-#x00_f6] |
[#x00_f8-#x00_ff] | [#x0100-#x0131] | [#x0134-#x013_e] | [#x0141-#x0148] |
[#x014_a-#x017_e] | [#x0180-#x01_c3] | [#x01_cd-#x01_f0] | [#x01_f4-#x01_f5] |
[#x01_fa-#x0217] | [#x0250-#x02_a8] | [#x02_bb-#x02_c1] | #x0386 |
[#x0388-#x038_a] | #x038_c | [#x038_e-#x03_a1] | [#x03_a3-#x03_ce] |
[#x03_d0-#x03_d6] | #x03_da | #x03_dc | #x03_de | #x03_e0 | [#x03_e2-#x03_f3] |
[#x0401-#x040_c] | [#x040_e-#x044_f] | [#x0451-#x045_c] | [#x045_e-#x0481] |
[#x0490-#x04_c4] | [#x04_c7-#x04_c8] | [#x04_cb-#x04_cc] | [#x04_d0-#x04_eb] |
[#x04_ee-#x04_f5] | [#x04_f8-#x04_f9] | [#x0531-#x0556] | #x0559 |
[#x0561-#x0586] | [#x05_d0-#x05_ea] | [#x05_f0-#x05_f2] | [#x0621-#x063_a] |
[#x0641-#x064_a] | [#x0671-#x06_b7] | [#x06_ba-#x06_be] | [#x06_c0-#x06_ce] |
[#x06_d0-#x06_d3] | #x06_d5 | [#x06_e5-#x06_e6] | [#x0905-#x0939] | #x093_d |
[#x0958-#x0961] | [#x0985-#x098_c] | [#x098_f-#x0990] | [#x0993-#x09_a8] |
[#x09_aa-#x09_b0] | #x09_b2 | [#x09_b6-#x09_b9] | [#x09_dc-#x09_dd] |
[#x09_df-#x09_e1] | [#x09_f0-#x09_f1] | [#x0_a05-#x0_a0_a] | [#x0_a0_f-#x0_a10] |
[#x0_a13-#x0_a28] | [#x0_a2_a-#x0_a30] | [#x0_a32-#x0_a33] | [#x0_a35-#x0_a36] |
[#x0_a38-#x0_a39] | [#x0_a59-#x0_a5_c] | #x0_a5_e | [#x0_a72-#x0_a74] |
[#x0_a85-#x0_a8_b] | #x0_a8_d | [#x0_a8_f-#x0_a91] | [#x0_a93-#x0_aa8] |
[#x0_aaa-#x0_ab0] | [#x0_ab2-#x0_ab3] | [#x0_ab5-#x0_ab9] | #x0_abd | #x0_ae0 |
[#x0_b05-#x0_b0_c] | [#x0_b0_f-#x0_b10] | [#x0_b13-#x0_b28] | [#x0_b2_a-#x0_b30] |
[#x0_b32-#x0_b33] | [#x0_b36-#x0_b39] | #x0_b3_d | [#x0_b5_c-#x0_b5_d] |
[#x0_b5_f-#x0_b61] | [#x0_b85-#x0_b8_a] | [#x0_b8_e-#x0_b90] | [#x0_b92-#x0_b95] |
[#x0_b99-#x0_b9_a] | #x0_b9_c | [#x0_b9_e-#x0_b9_f] | [#x0_ba3-#x0_ba4] |
[#x0_ba8-#x0_baa] | [#x0_bae-#x0_bb5] | [#x0_bb7-#x0_bb9] | [#x0_c05-#x0_c0_c] |
[#x0_c0_e-#x0_c10] | [#x0_c12-#x0_c28] | [#x0_c2_a-#x0_c33] | [#x0_c35-#x0_c39] |
[#x0_c60-#x0_c61] | [#x0_c85-#x0_c8_c] | [#x0_c8_e-#x0_c90] | [#x0_c92-#x0_ca8] |
[#x0_caa-#x0_cb3] | [#x0_cb5-#x0_cb9] | #x0_cde | [#x0_ce0-#x0_ce1] |
[#x0_d05-#x0_d0_c] | [#x0_d0_e-#x0_d10] | [#x0_d12-#x0_d28] | [#x0_d2_a-#x0_d39] |
[#x0_d60-#x0_d61] | [#x0_e01-#x0_e2_e] | #x0_e30 | [#x0_e32-#x0_e33] |
[#x0_e40-#x0_e45] | [#x0_e81-#x0_e82] | #x0_e84 | [#x0_e87-#x0_e88] | #x0_e8_a |
#x0_e8_d | [#x0_e94-#x0_e97] | [#x0_e99-#x0_e9_f] | [#x0_ea1-#x0_ea3] | #x0_ea5 |
#x0_ea7 | [#x0_eaa-#x0_eab] | [#x0_ead-#x0_eae] | #x0_eb0 | [#x0_eb2-#x0_eb3] |
#x0_ebd | [#x0_ec0-#x0_ec4] | [#x0_f40-#x0_f47] | [#x0_f49-#x0_f69] |
[#x10_a0-#x10_c5] | [#x10_d0-#x10_f6] | #x1100 | [#x1102-#x1103] |
[#x1105-#x1107] | #x1109 | [#x110_b-#x110_c] | [#x110_e-#x1112] | #x113_c |
#x113_e | #x1140 | #x114_c | #x114_e | #x1150 | [#x1154-#x1155] | #x1159 |
[#x115_f-#x1161] | #x1163 | #x1165 | #x1167 | #x1169 | [#x116_d-#x116_e] |
[#x1172-#x1173] | #x1175 | #x119_e | #x11_a8 | #x11_ab | [#x11_ae-#x11_af] |
[#x11_b7-#x11_b8] | #x11_ba | [#x11_bc-#x11_c2] | #x11_eb | #x11_f0 | #x11_f9 |
[#x1_e00-#x1_e9_b] | [#x1_ea0-#x1_ef9] | [#x1_f00-#x1_f15] | [#x1_f18-#x1_f1_d] |
[#x1_f20-#x1_f45] | [#x1_f48-#x1_f4_d] | [#x1_f50-#x1_f57] | #x1_f59 | #x1_f5_b |
#x1_f5_d | [#x1_f5_f-#x1_f7_d] | [#x1_f80-#x1_fb4] | [#x1_fb6-#x1_fbc] | #x1_fbe |
[#x1_fc2-#x1_fc4] | [#x1_fc6-#x1_fcc] | [#x1_fd0-#x1_fd3] | [#x1_fd6-#x1_fdb] |
[#x1_fe0-#x1_fec] | [#x1_ff2-#x1_ff4] | [#x1_ff6-#x1_ffc] | #x2126 |
[#x212_a-#x212_b] | #x212_e | [#x2180-#x2182] | [#x3041-#x3094] |
[#x30_a1-#x30_fa] | [#x3105-#x312_c] | [#x_ac00-#x_d7_a3]"""

ideographic = """[#x4_e00-#x9_fa5] | #x3007 | [#x3021-#x3029]"""

combining_character = """
[#x0300-#x0345] | [#x0360-#x0361] | [#x0483-#x0486] | [#x0591-#x05_a1] |
[#x05_a3-#x05_b9] | [#x05_bb-#x05_bd] | #x05_bf | [#x05_c1-#x05_c2] | #x05_c4 |
[#x064_b-#x0652] | #x0670 | [#x06_d6-#x06_dc] | [#x06_dd-#x06_df] |
[#x06_e0-#x06_e4] | [#x06_e7-#x06_e8] | [#x06_ea-#x06_ed] | [#x0901-#x0903] |
#x093_c | [#x093_e-#x094_c] | #x094_d | [#x0951-#x0954] | [#x0962-#x0963] |
[#x0981-#x0983] | #x09_bc | #x09_be | #x09_bf | [#x09_c0-#x09_c4] |
[#x09_c7-#x09_c8] | [#x09_cb-#x09_cd] | #x09_d7 | [#x09_e2-#x09_e3] | #x0_a02 |
#x0_a3_c | #x0_a3_e | #x0_a3_f | [#x0_a40-#x0_a42] | [#x0_a47-#x0_a48] |
[#x0_a4_b-#x0_a4_d] | [#x0_a70-#x0_a71] | [#x0_a81-#x0_a83] | #x0_abc |
[#x0_abe-#x0_ac5] | [#x0_ac7-#x0_ac9] | [#x0_acb-#x0_acd] | [#x0_b01-#x0_b03] |
#x0_b3_c | [#x0_b3_e-#x0_b43] | [#x0_b47-#x0_b48] | [#x0_b4_b-#x0_b4_d] |
[#x0_b56-#x0_b57] | [#x0_b82-#x0_b83] | [#x0_bbe-#x0_bc2] | [#x0_bc6-#x0_bc8] |
[#x0_bca-#x0_bcd] | #x0_bd7 | [#x0_c01-#x0_c03] | [#x0_c3_e-#x0_c44] |
[#x0_c46-#x0_c48] | [#x0_c4_a-#x0_c4_d] | [#x0_c55-#x0_c56] | [#x0_c82-#x0_c83] |
[#x0_cbe-#x0_cc4] | [#x0_cc6-#x0_cc8] | [#x0_cca-#x0_ccd] | [#x0_cd5-#x0_cd6] |
[#x0_d02-#x0_d03] | [#x0_d3_e-#x0_d43] | [#x0_d46-#x0_d48] | [#x0_d4_a-#x0_d4_d] |
#x0_d57 | #x0_e31 | [#x0_e34-#x0_e3_a] | [#x0_e47-#x0_e4_e] | #x0_eb1 |
[#x0_eb4-#x0_eb9] | [#x0_ebb-#x0_ebc] | [#x0_ec8-#x0_ecd] | [#x0_f18-#x0_f19] |
#x0_f35 | #x0_f37 | #x0_f39 | #x0_f3_e | #x0_f3_f | [#x0_f71-#x0_f84] |
[#x0_f86-#x0_f8_b] | [#x0_f90-#x0_f95] | #x0_f97 | [#x0_f99-#x0_fad] |
[#x0_fb1-#x0_fb7] | #x0_fb9 | [#x20_d0-#x20_dc] | #x20_e1 | [#x302_a-#x302_f] |
#x3099 | #x309_a"""

digit = """
[#x0030-#x0039] | [#x0660-#x0669] | [#x06_f0-#x06_f9] | [#x0966-#x096_f] |
[#x09_e6-#x09_ef] | [#x0_a66-#x0_a6_f] | [#x0_ae6-#x0_aef] | [#x0_b66-#x0_b6_f] |
[#x0_be7-#x0_bef] | [#x0_c66-#x0_c6_f] | [#x0_ce6-#x0_cef] | [#x0_d66-#x0_d6_f] |
[#x0_e50-#x0_e59] | [#x0_ed0-#x0_ed9] | [#x0_f20-#x0_f29]"""

extender = """
#x00_b7 | #x02_d0 | #x02_d1 | #x0387 | #x0640 | #x0_e46 | #x0_ec6 | #x3005 |
#[#x3031-#x3035] | [#x309_d-#x309_e] | [#x30_fc-#x30_fe]"""

letter = " | ".join([base_char, ideographic])

# Without the
name = " | ".join([letter, digit, ".", "-", "_", combining_character,
                   extender])
name_first = " | ".join([letter, "_"])

re_char = re.compile(r"#x([\d|A-F]{4,4})")
re_char_range = re.compile(r"\[#x([\d|A-F]{4,4})-#x([\d|A-F]{4,4})\]")


def char_string_to_list(chars):
    char_ranges = [item.strip() for item in chars.split(" | ")]
    rv = []
    for item in char_ranges:
        found_match = False
        for regexp in (re_char, re_char_range):
            match = regexp.match(item)
            if match is not None:
                rv.append([hex_to_int(item) for item in match.groups()])
                if len(rv[-1]) == 1:
                    rv[-1] = rv[-1] * 2
                found_match = True
                break
        if not found_match:
            assert len(item) == 1

            rv.append([ord(item)] * 2)
    rv = normalise_char_list(rv)
    return rv


def normalise_char_list(char_list):
    char_list = sorted(char_list)
    for item in char_list:
        assert item[1] >= item[0]
    rv = []
    i = 0
    while i < len(char_list):
        j = 1
        rv.append(char_list[i])
        while i + j < len(char_list) and char_list[i + j][0] <= rv[-1][1] + 1:
            rv[-1][1] = char_list[i + j][1]
            j += 1
        i += j
    return rv


# We don't really support characters above the BMP :(
max_unicode = int("FFFF", 16)


def missing_ranges(char_list):
    rv = []
    if char_list[0] != 0:
        rv.append([0, char_list[0][0] - 1])
    for i, item in enumerate(char_list[:-1]):
        rv.append([item[1] + 1, char_list[i + 1][0] - 1])
    if char_list[-1][1] != max_unicode:
        rv.append([char_list[-1][1] + 1, max_unicode])
    return rv


def list_to_regexp_str(char_list):
    rv = []
    for item in char_list:
        if item[0] == item[1]:
            rv.append(escape_regexp(chr(item[0])))
        else:
            rv.append(escape_regexp(chr(item[0])) + "-" +
                      escape_regexp(chr(item[1])))
    return "[%s]" % "".join(rv)


def hex_to_int(hex_str):
    return int(hex_str, 16)


def escape_regexp(string):
    special_characters = (".", "^", "$", "*", "+", "?", "{", "}",
                         "[", "]", "|", "(", ")", "-")
    for char in special_characters:
        string = string.replace(char, "\\" + char)

    return string

# output from the above
non_xml_name_bmp_regexp = re.compile('[\x00-,/:-@\\[-\\^`\\{-\xb6\xb8-\xbf\xd7\xf7\u0132-\u0133\u013f-\u0140\u0149\u017f\u01c4-\u01cc\u01f1-\u01f3\u01f6-\u01f9\u0218-\u024f\u02a9-\u02ba\u02c2-\u02cf\u02d2-\u02ff\u0346-\u035f\u0362-\u0385\u038b\u038d\u03a2\u03cf\u03d7-\u03d9\u03db\u03dd\u03df\u03e1\u03f4-\u0400\u040d\u0450\u045d\u0482\u0487-\u048f\u04c5-\u04c6\u04c9-\u04ca\u04cd-\u04cf\u04ec-\u04ed\u04f6-\u04f7\u04fa-\u0530\u0557-\u0558\u055a-\u0560\u0587-\u0590\u05a2\u05ba\u05be\u05c0\u05c3\u05c5-\u05cf\u05eb-\u05ef\u05f3-\u0620\u063b-\u063f\u0653-\u065f\u066a-\u066f\u06b8-\u06b9\u06bf\u06cf\u06d4\u06e9\u06ee-\u06ef\u06fa-\u0900\u0904\u093a-\u093b\u094e-\u0950\u0955-\u0957\u0964-\u0965\u0970-\u0980\u0984\u098d-\u098e\u0991-\u0992\u09a9\u09b1\u09b3-\u09b5\u09ba-\u09bb\u09bd\u09c5-\u09c6\u09c9-\u09ca\u09ce-\u09d6\u09d8-\u09db\u09de\u09e4-\u09e5\u09f2-\u0a01\u0a03-\u0a04\u0a0b-\u0a0e\u0a11-\u0a12\u0a29\u0a31\u0a34\u0a37\u0a3a-\u0a3b\u0a3d\u0a43-\u0a46\u0a49-\u0a4a\u0a4e-\u0a58\u0a5d\u0a5f-\u0a65\u0a75-\u0a80\u0a84\u0a8c\u0a8e\u0a92\u0aa9\u0ab1\u0ab4\u0aba-\u0abb\u0ac6\u0aca\u0ace-\u0adf\u0ae1-\u0ae5\u0af0-\u0b00\u0b04\u0b0d-\u0b0e\u0b11-\u0b12\u0b29\u0b31\u0b34-\u0b35\u0b3a-\u0b3b\u0b44-\u0b46\u0b49-\u0b4a\u0b4e-\u0b55\u0b58-\u0b5b\u0b5e\u0b62-\u0b65\u0b70-\u0b81\u0b84\u0b8b-\u0b8d\u0b91\u0b96-\u0b98\u0b9b\u0b9d\u0ba0-\u0ba2\u0ba5-\u0ba7\u0bab-\u0bad\u0bb6\u0bba-\u0bbd\u0bc3-\u0bc5\u0bc9\u0bce-\u0bd6\u0bd8-\u0be6\u0bf0-\u0c00\u0c04\u0c0d\u0c11\u0c29\u0c34\u0c3a-\u0c3d\u0c45\u0c49\u0c4e-\u0c54\u0c57-\u0c5f\u0c62-\u0c65\u0c70-\u0c81\u0c84\u0c8d\u0c91\u0ca9\u0cb4\u0cba-\u0cbd\u0cc5\u0cc9\u0cce-\u0cd4\u0cd7-\u0cdd\u0cdf\u0ce2-\u0ce5\u0cf0-\u0d01\u0d04\u0d0d\u0d11\u0d29\u0d3a-\u0d3d\u0d44-\u0d45\u0d49\u0d4e-\u0d56\u0d58-\u0d5f\u0d62-\u0d65\u0d70-\u0e00\u0e2f\u0e3b-\u0e3f\u0e4f\u0e5a-\u0e80\u0e83\u0e85-\u0e86\u0e89\u0e8b-\u0e8c\u0e8e-\u0e93\u0e98\u0ea0\u0ea4\u0ea6\u0ea8-\u0ea9\u0eac\u0eaf\u0eba\u0ebe-\u0ebf\u0ec5\u0ec7\u0ece-\u0ecf\u0eda-\u0f17\u0f1a-\u0f1f\u0f2a-\u0f34\u0f36\u0f38\u0f3a-\u0f3d\u0f48\u0f6a-\u0f70\u0f85\u0f8c-\u0f8f\u0f96\u0f98\u0fae-\u0fb0\u0fb8\u0fba-\u109f\u10c6-\u10cf\u10f7-\u10ff\u1101\u1104\u1108\u110a\u110d\u1113-\u113b\u113d\u113f\u1141-\u114b\u114d\u114f\u1151-\u1153\u1156-\u1158\u115a-\u115e\u1162\u1164\u1166\u1168\u116a-\u116c\u116f-\u1171\u1174\u1176-\u119d\u119f-\u11a7\u11a9-\u11aa\u11ac-\u11ad\u11b0-\u11b6\u11b9\u11bb\u11c3-\u11ea\u11ec-\u11ef\u11f1-\u11f8\u11fa-\u1dff\u1e9c-\u1e9f\u1efa-\u1eff\u1f16-\u1f17\u1f1e-\u1f1f\u1f46-\u1f47\u1f4e-\u1f4f\u1f58\u1f5a\u1f5c\u1f5e\u1f7e-\u1f7f\u1fb5\u1fbd\u1fbf-\u1fc1\u1fc5\u1fcd-\u1fcf\u1fd4-\u1fd5\u1fdc-\u1fdf\u1fed-\u1ff1\u1ff5\u1ffd-\u20cf\u20dd-\u20e0\u20e2-\u2125\u2127-\u2129\u212c-\u212d\u212f-\u217f\u2183-\u3004\u3006\u3008-\u3020\u3030\u3036-\u3040\u3095-\u3098\u309b-\u309c\u309f-\u30a0\u30fb\u30ff-\u3104\u312d-\u4dff\u9fa6-\uabff\ud7a4-\uffff]')  # noqa

non_xml_name_first_bmp_regexp = re.compile('[\x00-@\\[-\\^`\\{-\xbf\xd7\xf7\u0132-\u0133\u013f-\u0140\u0149\u017f\u01c4-\u01cc\u01f1-\u01f3\u01f6-\u01f9\u0218-\u024f\u02a9-\u02ba\u02c2-\u0385\u0387\u038b\u038d\u03a2\u03cf\u03d7-\u03d9\u03db\u03dd\u03df\u03e1\u03f4-\u0400\u040d\u0450\u045d\u0482-\u048f\u04c5-\u04c6\u04c9-\u04ca\u04cd-\u04cf\u04ec-\u04ed\u04f6-\u04f7\u04fa-\u0530\u0557-\u0558\u055a-\u0560\u0587-\u05cf\u05eb-\u05ef\u05f3-\u0620\u063b-\u0640\u064b-\u0670\u06b8-\u06b9\u06bf\u06cf\u06d4\u06d6-\u06e4\u06e7-\u0904\u093a-\u093c\u093e-\u0957\u0962-\u0984\u098d-\u098e\u0991-\u0992\u09a9\u09b1\u09b3-\u09b5\u09ba-\u09db\u09de\u09e2-\u09ef\u09f2-\u0a04\u0a0b-\u0a0e\u0a11-\u0a12\u0a29\u0a31\u0a34\u0a37\u0a3a-\u0a58\u0a5d\u0a5f-\u0a71\u0a75-\u0a84\u0a8c\u0a8e\u0a92\u0aa9\u0ab1\u0ab4\u0aba-\u0abc\u0abe-\u0adf\u0ae1-\u0b04\u0b0d-\u0b0e\u0b11-\u0b12\u0b29\u0b31\u0b34-\u0b35\u0b3a-\u0b3c\u0b3e-\u0b5b\u0b5e\u0b62-\u0b84\u0b8b-\u0b8d\u0b91\u0b96-\u0b98\u0b9b\u0b9d\u0ba0-\u0ba2\u0ba5-\u0ba7\u0bab-\u0bad\u0bb6\u0bba-\u0c04\u0c0d\u0c11\u0c29\u0c34\u0c3a-\u0c5f\u0c62-\u0c84\u0c8d\u0c91\u0ca9\u0cb4\u0cba-\u0cdd\u0cdf\u0ce2-\u0d04\u0d0d\u0d11\u0d29\u0d3a-\u0d5f\u0d62-\u0e00\u0e2f\u0e31\u0e34-\u0e3f\u0e46-\u0e80\u0e83\u0e85-\u0e86\u0e89\u0e8b-\u0e8c\u0e8e-\u0e93\u0e98\u0ea0\u0ea4\u0ea6\u0ea8-\u0ea9\u0eac\u0eaf\u0eb1\u0eb4-\u0ebc\u0ebe-\u0ebf\u0ec5-\u0f3f\u0f48\u0f6a-\u109f\u10c6-\u10cf\u10f7-\u10ff\u1101\u1104\u1108\u110a\u110d\u1113-\u113b\u113d\u113f\u1141-\u114b\u114d\u114f\u1151-\u1153\u1156-\u1158\u115a-\u115e\u1162\u1164\u1166\u1168\u116a-\u116c\u116f-\u1171\u1174\u1176-\u119d\u119f-\u11a7\u11a9-\u11aa\u11ac-\u11ad\u11b0-\u11b6\u11b9\u11bb\u11c3-\u11ea\u11ec-\u11ef\u11f1-\u11f8\u11fa-\u1dff\u1e9c-\u1e9f\u1efa-\u1eff\u1f16-\u1f17\u1f1e-\u1f1f\u1f46-\u1f47\u1f4e-\u1f4f\u1f58\u1f5a\u1f5c\u1f5e\u1f7e-\u1f7f\u1fb5\u1fbd\u1fbf-\u1fc1\u1fc5\u1fcd-\u1fcf\u1fd4-\u1fd5\u1fdc-\u1fdf\u1fed-\u1ff1\u1ff5\u1ffd-\u2125\u2127-\u2129\u212c-\u212d\u212f-\u217f\u2183-\u3006\u3008-\u3020\u302a-\u3040\u3095-\u30a0\u30fb-\u3104\u312d-\u4dff\u9fa6-\uabff\ud7a4-\uffff]')  # noqa

# Simpler things
non_pubid_char_regexp = re.compile("[^\x20\x0_d\x0_aa-z_a-Z0-9\\-'()+,./:=?;!*#@$_%]")


class InfosetFilter(object):
    replacement_regexp = re.compile(r"U[\d_a-F]{5,5}")

    def __init__(self,
                 drop_xmlns_local_name=False,
                 drop_xmlns_attr_ns=False,
                 prevent_double_dash_comments=False,
                 prevent_dash_at_comment_end=False,
                 replace_form_feed_characters=True,
                 prevent_single_quote_pubid=False):

        self.drop_xmlns_local_name = drop_xmlns_local_name
        self.drop_xmlns_attr_ns = drop_xmlns_attr_ns

        self.prevent_double_dash_comments = prevent_double_dash_comments
        self.prevent_dash_at_comment_end = prevent_dash_at_comment_end

        self.replace_form_feed_characters = replace_form_feed_characters

        self.prevent_single_quote_pubid = prevent_single_quote_pubid

        self.replace_cache = {}

    def coerce_attribute(self, name, namespace=None):
        if self.drop_xmlns_local_name and name.startswith("xmlns:"):
            warnings.warn("Attributes cannot begin with xmlns", DataLossWarning)
            return None
        elif (self.drop_xmlns_attr_ns and
              namespace == "http://www.w3.org/2000/xmlns/"):
            warnings.warn("Attributes cannot be in the xml namespace", DataLossWarning)
            return None
        else:
            return self.to_xml_name(name)

    def coerce_element(self, name):
        return self.to_xml_name(name)

    def coerce_comment(self, data):
        if self.prevent_double_dash_comments:
            while "--" in data:
                warnings.warn("Comments cannot contain adjacent dashes", DataLossWarning)
                data = data.replace("--", "- -")
            if data.endswith("-"):
                warnings.warn("Comments cannot end in a dash", DataLossWarning)
                data += " "
        return data

    def coerce_characters(self, data):
        if self.replace_form_feed_characters:
            for _ in range(data.count("\x0_c")):
                warnings.warn("Text cannot contain U+000C", DataLossWarning)
            data = data.replace("\x0_c", " ")
        # Other non-xml characters
        return data

    def coerce_pubid(self, data):
        data_output = data
        for char in non_pubid_char_regexp.findall(data):
            warnings.warn("Coercing non-XML pubid", DataLossWarning)
            replacement = self.get_replacement_character(char)
            data_output = data_output.replace(char, replacement)
        if self.prevent_single_quote_pubid and data_output.find("'") >= 0:
            warnings.warn("Pubid cannot contain single quote", DataLossWarning)
            data_output = data_output.replace("'", self.get_replacement_character("'"))
        return data_output

    def to_xml_name(self, name):
        name_first = name[0]
        name_rest = name[1:]
        m = non_xml_name_first_bmp_regexp.match(name_first)
        if m:
            warnings.warn("Coercing non-XML name: %s" % name, DataLossWarning)
            name_first_output = self.get_replacement_character(name_first)
        else:
            name_first_output = name_first

        name_rest_output = name_rest
        replace_chars = set(non_xml_name_bmp_regexp.findall(name_rest))
        for char in replace_chars:
            warnings.warn("Coercing non-XML name: %s" % name, DataLossWarning)
            replacement = self.get_replacement_character(char)
            name_rest_output = name_rest_output.replace(char, replacement)
        return name_first_output + name_rest_output

    def get_replacement_character(self, char):
        if char in self.replace_cache:
            replacement = self.replace_cache[char]
        else:
            replacement = self.escape_char(char)
        return replacement

    def from_xml_name(self, name):
        for item in set(self.replacement_regexp.findall(name)):
            name = name.replace(item, self.unescape_char(item))
        return name

    def escape_char(self, char):
        replacement = "U%05X" % ord(char)
        self.replace_cache[char] = replacement
        return replacement

    def unescape_char(self, charcode):
        return chr(int(charcode[1:], 16))
