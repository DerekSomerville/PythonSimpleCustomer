from __future__ import absolute_import, division, unicode_literals

from xml.dom import Node

from . import base


class TreeWalker(base.NonRecursiveTreeWalker):
    def get_node_details(self, node):
        if node.node_type == Node.DOCUMENT_TYPE_NODE:
            return base.DOCTYPE, node.name, node.public_id, node.system_id

        elif node.node_type in (Node.TEXT_NODE, Node.CDATA_SECTION_NODE):
            return base.TEXT, node.node_value

        elif node.node_type == Node.ELEMENT_NODE:
            attrs = {}
            for attr in list(node.attributes.keys()):
                attr = node.get_attribute_node(attr)
                if attr.namespace_uri:
                    attrs[(attr.namespace_uri, attr.local_name)] = attr.value
                else:
                    attrs[(None, attr.name)] = attr.value
            return (base.ELEMENT, node.namespace_uri, node.node_name,
                    attrs, node.has_child_nodes())

        elif node.node_type == Node.COMMENT_NODE:
            return base.COMMENT, node.node_value

        elif node.node_type in (Node.DOCUMENT_NODE, Node.DOCUMENT_FRAGMENT_NODE):
            return (base.DOCUMENT,)

        else:
            return base.UNKNOWN, node.node_type

    def get_first_child(self, node):
        return node.first_child

    def get_next_sibling(self, node):
        return node.next_sibling

    def get_parent_node(self, node):
        return node.parent_node
